#!/usr/bin/python3

import sys
import os
import re
import shlex
import enum
import operator
import copy

# Expression Parser
###############################################################################

class Node:
	def __init__(self, token_type, value=None):
		self.token_type = token_type
		self.value = value
		self.children = []

def lexical_analysis(s):
	tokens = []
	curr = None
	for c in s:
		if c in ['+', '-', '*', '/', '(', ')']:
			if curr != None:
				tokens.append(curr)
				curr = None

			tokens.append(Node(c, value=c))
		elif (curr == None or curr.token_type != 'v') and re.match(r'\d', c):
			if curr != None and curr.token_type != 'n':
				tokens.append(curr)
				curr = None

			if curr != None:
				curr.value += c
			else:
				curr = Node('n', value=c)
		elif ((curr == None or curr.token_type != 'v') and re.match(r'[A-Za-z_]', c)) or (curr != None and curr.token_type == 'v' and re.match(r'[A-Za-z0-9_]', c)):
			if curr != None and curr.token_type != 'v':
				tokens.append(curr)
				curr = None

			if curr != None:
				curr.value += c
			else:
				curr = Node('v', value=c)
		else:
			raise Exception('Invalid token: {}'.format(c))
	if curr != None:
		tokens.append(curr)
	tokens.append(Node('e'))
	return tokens

def match(tokens, token):
	if tokens[0].token_type == token:
		return tokens.pop(0)
	else:
		raise Exception('Invalid syntax on token {}'.format(tokens[0].token_type))

def parse_e(tokens):
	left_node = parse_e2(tokens)

	while tokens[0].token_type in ['+', '-']:
		node = tokens.pop(0)
		node.children.append(left_node)
		node.children.append(parse_e2(tokens))
		left_node = node

	return left_node

def parse_e2(tokens):
	left_node = parse_e3(tokens)

	while tokens[0].token_type in ['*', '/']:
		node = tokens.pop(0)
		node.children.append(left_node)
		node.children.append(parse_e3(tokens))
		left_node = node

	return left_node

def parse_e3(tokens):
	if tokens[0].token_type == 'n':
		return tokens.pop(0)
	elif tokens[0].token_type == 'v':
		return tokens.pop(0)

	match(tokens, '(')
	expression = parse_e(tokens)
	match(tokens, ')')

	return expression

def parse(inputstring):
	tokens = lexical_analysis(inputstring)
	ast = parse_e(tokens)
	match(tokens, 'e')
	return ast

operations = {
	'+': operator.add,
	'-': operator.sub,
	'*': operator.mul,
	'/': operator.truediv
}

def compute(expr, params):
	node = expr
	if isinstance(expr, str):
		node = parse(expr)
	if node.token_type == 'n':
		return int(node.value)
	elif node.token_type == 'v':
		if node.value in params:
			return int(params[node.value])
	left_result = compute(node.children[0], params)
	right_result = compute(node.children[1], params)
	operation = operations[node.token_type]
	return operation(left_result, right_result)

# Test Parser
###############################################################################

class Deftype:
	def __init__(self, name, params):
		self.name = name
		self.params = params

	def __str__(self):
		if self.params:
			return self.name + "<" + ",".join(self.params) + ">"
		else:
			return self.name

	def flatten(self, params):
		for i, param in enumerate(self.params):
			self.params[i] = str(compute(param, params))

class Defarg:
	def __init__(self, name, vtype):
		self.name = name
		self.vtype = vtype

	def sink(self):
		return "sink_" + str(self.vtype) + " sink_" + self.name + "(g, " + self.name + ");"

	def inst(self):
		return str(self.vtype) + " " + self.name + ";"

class Defproc:
	def __init__(self, path, tmpl, args):
		self.path = path
		self.tmpl = tmpl
		self.args = args

	def flatten(self, values):
		params = {param.name: value for param, value in zip(self.tmpl, values)}

		result = copy.deepcopy(self)
		for arg in result.args:
			arg.vtype.flatten(params)
		return result

	def argdef(self):
		return "; ".join([str(arg.vtype) + " " + arg.name for arg in self.args])

	def arglist(self):
		return ",".join([arg.name for arg in self.args])	

def parseArgs(line):
	result = []
	for arg in line.split(","):
		result.append(arg.strip())
	return result

class ChpTerm:
	def __init__(self, name, vdir):
		self.name = name
		self.vdir = vdir

def parseChpTerms(line):
	result = []
	for arg in line.split(","):
		arg = arg.strip()
		vdir = ""
		if len(arg) > 0 and arg[-1] in "?!":
			vdir = arg[-1]
			arg = arg[0:-1]

		if " " in arg:
			result.append(ChpTerm([sub.strip() for sub in arg.split(" ")], vdir))
		else:
			result.append(ChpTerm(arg, vdir))
	return result

def parseType(line):
	o = line.find("<")
	c = line.rfind(">")
	if o != -1 and c != -1:
		return Deftype(line[0:o], parseArgs(line[o+1:c]))
	else:
		return Deftype(line, [])

def parseDefargs(line):
	args = []
	for elem in line.split(";"):
		m = re.match(r'([a-zA-Z_][a-zA-Z_0-9]*(?:<[^>]*>)?) *(.*)', elem.strip())
		if m is not None:
			argtype = parseType(m.group(1).strip())
			for arg in m.group(2).split(","):
				args.append(Defarg(arg.strip(), argtype))
	return args

def findProcesses():
	processes = {}
	for line in os.popen("find * -name '*.act' | grep -v \"test/\""):
		path = line.strip()
		with open(path, "r") as fptr:
			for m in re.findall(r'(?:template\s*<([^>]*)>)?\s*(?:export\s*)?defproc\s*([A-Za-z_][A-Za-z0-9_]*)\(([^\)]*)\)', fptr.read()):
				if m[1] != '':
					tmpl = None
					if m[0] != '':
						tmpl = parseDefargs(m[0])
					name = m[1]
					args = parseDefargs(m[2])
					processes[name] = Defproc(path, tmpl, args)
	return processes

class Instance:
	def __init__(self, name, tmpl, args):
		self.name = name
		self.tmpl = tmpl
		self.args = args

	def test(self):
		return self.name + '_' + '_'.join(self.tmpl)

	def typestr(self):
		return self.name + "<" + ",".join(self.tmpl) + ">"

class Deftest:
	def __init__(self, proc, chptest):
		self.proc = proc
		self.chptest = chptest

	def testPath(self):
		name = shlex.quote(self.proc.test())
		if name[0] == '\'' and name[-1] == '\'':
			name = name[1:-1]
		return os.getcwd() + "/test/" + name

	def createDir(self):
		path = self.testPath()

		chp = ""
		for item in self.chptest[1:len(self.chptest)]:
			if chp != "":
				chp += " "
			chp += shlex.quote(item)

		os.system('mkdir -p \'' + path + '\'')
		print('go test ' + projectRoot() + '/... -v -run ' + shlex.quote(self.chptest[0]) + ' -args \'' + path + '\' ' + chp)
		os.system('go test ' + projectRoot() + '/... -v -run ' + shlex.quote(self.chptest[0]) + ' -args \'' + path + '\' ' + chp)
		return path

def findTests():
	tests = []
	for line in os.popen("find * -name '*.act' | xargs grep -rh \"^//.*TestUnit\""):
		m = re.match(r'//\s*([^<]*)<([^>]*)>\(([^\)]*)\):(.*)', line)
		# TODO(edward.bingham) add support for multiple data streams for a single channel
		tests.append(Deftest(Instance(m.group(1), parseArgs(m.group(2)), parseChpTerms(m.group(3))), m.group(4).strip().split(" ")))
	return tests

# Generator
###############################################################################

def projectRoot():
	path = os.getcwd()
	while path and path != "/" and not os.path.exists(path + "/go.mod"):
		path = os.path.dirname(path)
	return path

def relativeCwd(root):
	return os.path.relpath(os.getcwd(), start=root)

# main
###############################################################################

def emit_chan(name, proto, rails, chp, vdir):
	return [
		"bundle dut.{name}.d[0:{rails}]".format(
			name  = name,
			rails = rails),
		"channel dut.{name} {proto} d[0:{rails}]".format(
			name  = name,
			proto = proto,
			rails = rails),
		"{kind} dut.{name} request {chp}.dat".format(
			kind = "inject" if vdir == '?' else "expect",
			name = name,
			chp  = chp)
	]

def emit_bus(name, wires, posedge, pair, chp, vdir):
	return [
		"clocked_bus dut.{name}.d[0:{wires}] dut.{name}.e {edge}{pair}".format(
			name  = name,
			wires = wires,
			edge  = "posedge" if posedge else "negedge",
			pair  = " pair" if pair else ""),
		"{kind} dut.{name}.d[0:{wires}] {chp}.dat".format(
			kind  = "inject" if vdir == '?' else "expect",
			name  = name,
			wires = wires,
			chp   = chp)
	]

def pr_test():
	root = projectRoot()
	if root == "/":
		print("pr test: go.mod file not found in current directory or any parent directory")

	processes = findProcesses()
	tests = findTests()
	
	for test in tests:
		if test.proc.name in processes:
			proc = processes[test.proc.name].flatten(test.proc.tmpl)
			path = test.createDir()
			relCwd = relativeCwd(root)
			if relCwd != ".":
				proc.path = relCwd + "/" + proc.path
			if proc.path.startswith("prs/"):
				proc.path = proc.path[4:]

			with open(path + "/test.act", "w") as fptr:
				print("import \"" + proc.path + "\";", file=fptr)
				print("import \"sink.act\";", file=fptr)
				print("", file=fptr)

				print("\ndefproc testbench(" + proc.argdef() + ")", file=fptr)
				print("{", file=fptr)
				print("\t[ DUT ->", file=fptr)
				print("\t" + test.proc.typestr() + " dut;", file=fptr)
				for arg in proc.args:
					print("\t" + arg.name + " = dut." + arg.name + ";", file=fptr)
				print("\t]", file=fptr)
				print("}\n", file=fptr)

				for arg, val in zip(proc.args, test.proc.args):
					print(arg.inst(), file=fptr)
					if val.name and val.vdir == '!':
						print(arg.sink(), file=fptr)

				print("testbench dut(" + proc.arglist() + ");", file=fptr)	

			with open(path + "/prsim.rc", "w") as fptr:
				print("""initialize
random
random_excl on

set_reset g.Reset
""", file=fptr)

				channels = []
				for arg, val in zip(proc.args, test.proc.args):
					if val.name:
						if arg.vtype.name == "bool":
							if val.name == "true":
								channels += ["set dut." + arg.name + " 1"]
							elif val.name == "false":
								channels += ["set dut." + arg.name + " 0"]
						elif arg.vtype.name == "e1of":
							channels += emit_chan(arg.name, "e", arg.vtype.params[0], val.name, val.vdir)
						elif arg.vtype.name == "bus2_e1of":
							channels += emit_chan(arg.name + ".c", "e", arg.vtype.params[1], val.name[0], val.vdir)
							channels += emit_bus(arg.name, arg.vtype.params[0], True, True, val.name[1], val.vdir)

				print("\n".join(channels), file=fptr)

				print("""
watchall
mode reset
set g.Vdd 1
set g.GND 0
set g._sReset 0
set g.sReset 1
set g._pReset 0
set g.pReset 1

cycle

set g._pReset 1
set g.pReset 0

cycle

mode run
status X

set g._sReset 1
set g.sReset 0

cycle""", file=fptr)

if __name__ == "__main__":
	if len(sys.argv) > 1:
		if sys.argv[1] == "init" and len(sys.argv) > 2:
			os.system("git init")
			os.system("go mod init " + shlex.quote(sys.argv[2]))
			os.system("mkdir -p prs chp")
		elif sys.argv[1] == "vendor":
			os.system("vend")
		elif sys.argv[1] == "test":
			pr_test()
		elif sys.argv[1] == "sim":
			os.system("prsim " + " ".join([shlex.quote(arg) for arg in sys.argv[2:]]))
		elif sys.argv[1] == "view":
			hasIndex = False
			with open(sys.argv[2], 'r') as fptr:
				if fptr.readline().startswith("Index"):
					hasIndex = True
			if hasIndex:
				os.system("sed -i 's/^[^ ]* *//g' " + shlex.quote(sys.argv[2]))
			os.system("gaw " + shlex.quote(sys.argv[2]))
		elif sys.argv[1] == "build" and os.path.exists("test.act") and os.path.exists("prsim.rc"):
			os.system("aflat -DDUT=true -DPRSIM=true test.act > test.prs")
		elif sys.argv[1] == "spice" and os.path.exists("test.act") and os.path.exists("prsim.rc"):
			tech = "sky130"
			if len(sys.argv) > 2:
				tech = shlex.quote(sys.argv[2])
			if os.path.exists("spice"):
				os.system("rm -rf spice")
			os.system("prspice -B -C " + tech + " -p 'testbench<>' -i 'dut' -s 'g.Vdd=1.8v;g.GND=0.0v;gwrap.Vdd=1.8v;gwrap.GND=0.0v' test.act prsim.rc -o spice")
			os.system("mv spice/dut.spi spice/long.spi")
			os.system("shortenspice.py spice/long.spi > spice/dut.spi")
			os.system("cp *.dat spice")

